[
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "data",
    "section": "",
    "text": "source\n\ncountries2list\n\n countries2list (COUNTRIES)\n\n\nsource\n\n\nlower_countries\n\n lower_countries (COUNTRIES)"
  },
  {
    "objectID": "result.html",
    "href": "result.html",
    "title": "result",
    "section": "",
    "text": "Fetching some results from search. Should change to a class soon\n\nclass Result(BaseModel):\n    \"\"\"\n    Model for results, including all the data taht will be retreived and their type\n    \"\"\"\n    pubmed:str\n    pmc: Optional[str]\n    doi: Optional[str]\n    pii: Optional[str]\n    abstract: str\n    autorlist: List[Autor]\n    title: str\n    journal: str\n    published: Optional[date]\n    mayorKeys: List[str]\n    mayorMesh: List[str]\n    minorMesh: List[str]\n\n\nsource\n\nResult\n\n Result (pubmed:str, pmc:Optional[str]=None, doi:Optional[str]=None,\n         pii:Optional[str]=None, abstract:str,\n         autorlist:List[pubmed_lib.author.Autor], title:str, journal:str,\n         published:Optional[datetime.date]=None, mayorKeys:List[str],\n         mayorMesh:List[str], minorMesh:List[str])\n\nModel for results, including all the data taht will be retreived and their type"
  },
  {
    "objectID": "author.html",
    "href": "author.html",
    "title": "Author",
    "section": "",
    "text": "source\n\nAutor\n\n Autor (Fname:str, Lname:str, name:str, initials:str, emails:str,\n        affiliations:str, identifier:str)\n\nAutor class to be use as a container with the information of the an author\n\ndata = {\n    'Fname': 'autorFN',\n    'Lname': 'autorLN',\n    'emails': 'emails',\n    'affiliations': 'AFFs', \n    'identifier': 'autorID',\n    'name': 'name', \n    'initials': 'autorIN'\n       }\n\n\nAutor.parse_obj(data)\n\nAutor(Fname='Autorfn', Lname='Autorln', name='Name', initials='Autorin', emails='emails', affiliations='Affs', identifier='autorID')\n\n\n\nx = Autor.parse_obj(data)\n\n\nx.dict()\n\n{'Fname': 'Autorfn',\n 'Lname': 'Autorln',\n 'name': 'Name',\n 'initials': 'Autorin',\n 'emails': 'emails',\n 'affiliations': 'Affs',\n 'identifier': 'autorID'}"
  },
  {
    "objectID": "parser.html",
    "href": "parser.html",
    "title": "Parser",
    "section": "",
    "text": "source\n\nparsePubmedData\n\n parsePubmedData (pubmeddata:dict)\n\nReceive the xml section of PubmedData and return list of ids\n\n\n\n\nType\nDetails\n\n\n\n\npubmeddata\ndict\nData retrieve from pubmedData\n\n\nReturns\nlist\n\n\n\n\n\nsource\n\n\nparseArticle\n\n parseArticle (article_info:dict)\n\nFunction to extract information from an Article, including Title, Abstract, AutorList, journal and published Date :param article_info: dictionary from key Article of an Medline citation :return (dict): tuple of dictionary with information from paper and autors\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\narticle_info\ndict\nDictionary containing information of the article (‘Article’ Key)\n\n\nReturns\ndict\nSomethign\n\n\n\n\nsource\n\n\nparse_email\n\n parse_email (affil_text:str)\n\nFind email from the Affiliation text (Maybe use the reg_email regex and not the one in the function, TEST)\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\naffil_text\nstr\nAffiliations information for each autor in the Article\n\n\nReturns\nstr\n\n\n\n\n\nsource\n\n\nparseMayorKeys\n\n parseMayorKeys (citationInfo:dict)\n\nFunction to Parse the Mayor Keys from the Article.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncitationInfo\ndict\nDictionary from ‘MedlineCitation’ key containing keywords information\n\n\nReturns\nlist\n\n\n\n\n\nsource\n\n\nparseMeshKeys\n\n parseMeshKeys (citationInfo:dict)\n\nFunction to Parse the Mayor and Minor MeSH Keys from the Article.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncitationInfo\ndict\nDictionary from ‘MedlineCitation’ key containing keywords information\n\n\nReturns\n(&lt;class ‘list’&gt;, &lt;class ‘list’&gt;)\n\n\n\n\n\nsource\n\n\nparseKeys\n\n parseKeys (citationInfo:dict)\n\nFunction to retrieve the mayor keys as well as MEsh Keys\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncitationInfo\ndict\nDictionary from ‘MedlineCitation’ key containing keywords information\n\n\nReturns\ntuple\n\n\n\n\n\nsource\n\n\nparse_paperinfo\n\n parse_paperinfo (paperinfo_xml:str)\n\nFunction that parse the paper inforation and retrieve a dictionary\n\n\n\n\nType\nDetails\n\n\n\n\npaperinfo_xml\nstr\nXml data retreived from pubmed\n\n\nReturns\ndict\n\n\n\n\n\nsource\n\n\nparse_author_xml\n\n parse_author_xml (autor_xml)\n\nReceive a dictionary from pubmed with the information of the Author. Retreive a Autor object with all the information parsed\n\n\n\n\nType\nDetails\n\n\n\n\nautor_xml\n\nXml data containing information for each author\n\n\nReturns\nAutor\n\n\n\n\n\nimport nbdev; nbdev.nbdev_export()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pubmed_lib",
    "section": "",
    "text": "pip install pubmed_lib"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "pubmed_lib",
    "section": "",
    "text": "pip install pubmed_lib"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "pubmed_lib",
    "section": "How to use",
    "text": "How to use\nThis library has the basic functionalities to retreive data from pubmed search to be used with Langchain for Q&A systems, it is a simple wrapper from the Biopython\nFirst you need to create a search object, with the default parameter you will use in the search\n\nsource\n\nSearch\n\n Search (search_tag:str=None, retmax:int=200, retmode:str='xml',\n         sort:str='relevance', mindate:Optional[int]=None,\n         maxdate:Optional[int]=None, idlist:Optional[List[int]]=None)\n\nSearch class to warp the search and results\nHere we will create the object with a max number of results of 10\nthe search_tag correspondes to the tag where you will do the search, the options available are the following:\n\nfor k in SEARCH_TAGS.keys():\n    print(f\"{k}\")\n\nAffiliation\nAll Fields\nArticle Identifier\nAuthor\nAuthor Identifier\nEC/RN Number\nFirst Author Name\nFull Author Name\nFull Investigator Name\nGrant Number\nInvestigator\nJournal\nLast Author Name\nLocation ID\nMeSH Major Topic\nMeSH Subheadings\nMeSH Terms\nOther Term\nPMID\nSubset\nText Words\nTitle\nTitle/Abstract\n\n\nBy defaults is setup to search in Title/Abstract\n\nsearch = Search(retmax=10)\n\nTo actually do the search, you need to call the method search and give the query\n\nsource\n\n\nSearch.search\n\n Search.search (query:str)\n\nIt receive a query to be searched in pubmed and return the handler of the search\n\n\n\n\nType\nDetails\n\n\n\n\nquery\nstr\nQuery to be search in pubmed\n\n\n\n\nresults = search.search('Bi-functional degraders in cancer')\n\n\nresults\n\n['35285613', '33672989', '23749892', '17310834', '35644005', '16870428', '29587668', '21269262', '25685909', '27815492']\n\n\nto fetch the results you need to call the fetch_details method, and pass the list of pubmedIds retreive previously\n\narticles = search.fetch_details(results)\n\nThis will give you the xml data retreived from pubmed\nIn order to retreive the parsed resutls, you should use the method results\n\nsource\n\n\nSearch.results\n\n Search.results (query:str)\n\nMethod that do the search and retrieve a generator with all the infomration of the articles\n\n\n\n\nType\nDetails\n\n\n\n\nquery\nstr\nTerm to be queried in pubmed\n\n\nReturns\nGenerator\n\n\n\n\n\nresults = search.results('Bi-functional degraders in cancer')\n\n\nres = list(results)\n\n\nres[0]\n\nResult(pubmed='35285613', pmc=None, doi='10.1021/acsabm.1c01216', pii=None, abstract=\"Gold nanorods (AuNRs) remain well-developed inorganic nanocarriers of small molecules for a plethora of biomedical and therapeutic applications. However, the delivery of therapeutic proteins using AuNRs with high protein loading capacity (LC), serum stability, excellent target specificity, and minimal off-target protein release is not known. Herein, we report two bi-functional AuNR-protein nanoconjugates, AuNR@EGFP-BSA&lt;sub&gt;FA&lt;/sub&gt; and AuNR@RNaseA-BSA&lt;sub&gt;FA&lt;/sub&gt;, supramolecularly coated with folic acid-modified BSA (BSA&lt;sub&gt;FA&lt;/sub&gt;) acting as biomimetic protein corona to demonstrate targeted cytosolic delivery of enhanced green fluorescent protein (EGFP) and therapeutic ribonuclease A enzyme (RNase A) in their functional forms. AuNR@EGFP-BSA&lt;sub&gt;FA&lt;/sub&gt; and AuNR@RNaseA-BSA&lt;sub&gt;FA&lt;/sub&gt; exhibit high LCs of ∼42 and ∼54%, respectively, increased colloidal stability, and rapid protein release in the presence of biological thiols. As a nanocarrier, AuNR@EGFP-BSA&lt;sub&gt;FA&lt;/sub&gt; and AuNR@RNaseA-BSA&lt;sub&gt;FA&lt;/sub&gt; show resistance to corona formation in high-serum media even after 24 h, guaranteeing a greater circulation lifetime. Folate receptor-targeting BSA&lt;sub&gt;FA&lt;/sub&gt; on the AuNR surface facilitates the receptor-mediated internalization, followed by the release of EGFP and RNase A in HT29 cells. The green fluorescence dispersed throughout the cell's cytoplasm indicates successful cytosolic delivery of EGFP by AuNR@EGFP-BSA&lt;sub&gt;FA&lt;/sub&gt;. AuNR@RNaseA-BSA&lt;sub&gt;FA&lt;/sub&gt;-mediated therapeutic RNase A delivery in multicellular 3D spheroids of HT29 cells exhibits a radical reduction in the cellular RNA fluorescence intensity to 38%, signifying RNA degradation and subsequent cell death. The versatile nanoformulation strategy in terms of the anisotropic particle morphology, protein type, and ability for targeted delivery in the functional form makes the present AuNR-protein nanoconjugates a promising platform for potential application in cancer management.\", autorlist=[Autor(Fname='Namita', Lname='Jaiswal', name='Namita Jaiswal', initials='N', emails='', affiliations='Department Of Biotechnology, National Institute Of Technology Durgapur, Durgapur 713209, India.;Material Processing And Microsystem Laboratory, Csir─Central Mechanical Engineering Research Institute, Durgapur 713209, India.', identifier=''), Autor(Fname='Sudeshna', Lname='Halder', name='Sudeshna Halder', initials='S', emails='', affiliations='Department Of Biotechnology, National Institute Of Technology Durgapur, Durgapur 713209, India.', identifier=''), Autor(Fname='Nibedita', Lname='Mahata', name='Nibedita Mahata', initials='N', emails='', affiliations='Department Of Biotechnology, National Institute Of Technology Durgapur, Durgapur 713209, India.', identifier=''), Autor(Fname='Nripen', Lname='Chanda', name='Nripen Chanda', initials='N', emails='', affiliations='Material Processing And Microsystem Laboratory, Csir─Central Mechanical Engineering Research Institute, Durgapur 713209, India.', identifier='0000-0002-9902-5595')], title='Bi-Functional Gold Nanorod-Protein Conjugates with Biomimetic BSA@Folic Acid Corona for Improved Tumor Targeting and Intracellular Delivery of Therapeutic Proteins in Colon Cancer 3D Spheroids.', journal='ACS applied bio materials', published=datetime.date(2022, 3, 14), mayorKeys=[], mayorMesh=['Colonic Neoplasms', 'Nanotubes'], minorMesh=['Biomimetics', 'Folic Acid', 'Gold', 'Humans', 'Nanoconjugates', 'Ribonuclease, Pancreatic'])\n\n\n\nres[0].dict()\n\n{'pubmed': '35285613',\n 'pmc': None,\n 'doi': '10.1021/acsabm.1c01216',\n 'pii': None,\n 'abstract': \"Gold nanorods (AuNRs) remain well-developed inorganic nanocarriers of small molecules for a plethora of biomedical and therapeutic applications. However, the delivery of therapeutic proteins using AuNRs with high protein loading capacity (LC), serum stability, excellent target specificity, and minimal off-target protein release is not known. Herein, we report two bi-functional AuNR-protein nanoconjugates, AuNR@EGFP-BSA&lt;sub&gt;FA&lt;/sub&gt; and AuNR@RNaseA-BSA&lt;sub&gt;FA&lt;/sub&gt;, supramolecularly coated with folic acid-modified BSA (BSA&lt;sub&gt;FA&lt;/sub&gt;) acting as biomimetic protein corona to demonstrate targeted cytosolic delivery of enhanced green fluorescent protein (EGFP) and therapeutic ribonuclease A enzyme (RNase A) in their functional forms. AuNR@EGFP-BSA&lt;sub&gt;FA&lt;/sub&gt; and AuNR@RNaseA-BSA&lt;sub&gt;FA&lt;/sub&gt; exhibit high LCs of ∼42 and ∼54%, respectively, increased colloidal stability, and rapid protein release in the presence of biological thiols. As a nanocarrier, AuNR@EGFP-BSA&lt;sub&gt;FA&lt;/sub&gt; and AuNR@RNaseA-BSA&lt;sub&gt;FA&lt;/sub&gt; show resistance to corona formation in high-serum media even after 24 h, guaranteeing a greater circulation lifetime. Folate receptor-targeting BSA&lt;sub&gt;FA&lt;/sub&gt; on the AuNR surface facilitates the receptor-mediated internalization, followed by the release of EGFP and RNase A in HT29 cells. The green fluorescence dispersed throughout the cell's cytoplasm indicates successful cytosolic delivery of EGFP by AuNR@EGFP-BSA&lt;sub&gt;FA&lt;/sub&gt;. AuNR@RNaseA-BSA&lt;sub&gt;FA&lt;/sub&gt;-mediated therapeutic RNase A delivery in multicellular 3D spheroids of HT29 cells exhibits a radical reduction in the cellular RNA fluorescence intensity to 38%, signifying RNA degradation and subsequent cell death. The versatile nanoformulation strategy in terms of the anisotropic particle morphology, protein type, and ability for targeted delivery in the functional form makes the present AuNR-protein nanoconjugates a promising platform for potential application in cancer management.\",\n 'autorlist': [{'Fname': 'Namita',\n   'Lname': 'Jaiswal',\n   'name': 'Namita Jaiswal',\n   'initials': 'N',\n   'emails': '',\n   'affiliations': 'Department Of Biotechnology, National Institute Of Technology Durgapur, Durgapur 713209, India.;Material Processing And Microsystem Laboratory, Csir─Central Mechanical Engineering Research Institute, Durgapur 713209, India.',\n   'identifier': ''},\n  {'Fname': 'Sudeshna',\n   'Lname': 'Halder',\n   'name': 'Sudeshna Halder',\n   'initials': 'S',\n   'emails': '',\n   'affiliations': 'Department Of Biotechnology, National Institute Of Technology Durgapur, Durgapur 713209, India.',\n   'identifier': ''},\n  {'Fname': 'Nibedita',\n   'Lname': 'Mahata',\n   'name': 'Nibedita Mahata',\n   'initials': 'N',\n   'emails': '',\n   'affiliations': 'Department Of Biotechnology, National Institute Of Technology Durgapur, Durgapur 713209, India.',\n   'identifier': ''},\n  {'Fname': 'Nripen',\n   'Lname': 'Chanda',\n   'name': 'Nripen Chanda',\n   'initials': 'N',\n   'emails': '',\n   'affiliations': 'Material Processing And Microsystem Laboratory, Csir─Central Mechanical Engineering Research Institute, Durgapur 713209, India.',\n   'identifier': '0000-0002-9902-5595'}],\n 'title': 'Bi-Functional Gold Nanorod-Protein Conjugates with Biomimetic BSA@Folic Acid Corona for Improved Tumor Targeting and Intracellular Delivery of Therapeutic Proteins in Colon Cancer 3D Spheroids.',\n 'journal': 'ACS applied bio materials',\n 'published': datetime.date(2022, 3, 14),\n 'mayorKeys': [],\n 'mayorMesh': ['Colonic Neoplasms', 'Nanotubes'],\n 'minorMesh': ['Biomimetics',\n  'Folic Acid',\n  'Gold',\n  'Humans',\n  'Nanoconjugates',\n  'Ribonuclease, Pancreatic']}"
  },
  {
    "objectID": "viz.html",
    "href": "viz.html",
    "title": "viz",
    "section": "",
    "text": "source\n\nplot_timeline\n\n plot_timeline (df, filename=None)\n\n\nsource\n\n\nplot_countries\n\n plot_countries (df_det, filename=None)"
  },
  {
    "objectID": "search.html",
    "href": "search.html",
    "title": "Search",
    "section": "",
    "text": "class Search(BaseModel):\n    \"\"\"\n    Search class to warp the search and results\n    \"\"\"\n    search_tag:str = None #Tag to specifiy the search, can be any from pubmed, Defaul: Title/Abstract\n    retmax:int = 200 #Maximum number of results to be retrieved\n    retmode:str ='xml' #Format of the returned data, options are xml, \n    sort:str='relevance' #Way to sort the results\n    mindate:Optional[int] = None #Initial data to be search from, year\n    maxdate:Optional[int] = None #Final data to be search from, year\n    idlist:Optional[List[int]]\n    Entrez.email = os.environ.get('EMAIL')\n    Entrez.api_key = os.environ.get('API_KEY')\n\n    \n    @validator('search_tag', always=True)\n    def validate_search_tag(cls, v):\n        if not v:\n            v = 'Title/Abstract'\n        if v not in SEARCH_TAGS.keys():\n            raise ValueError(f'Search tag need to be some of {SEARCH_TAGS.keys()}')\n        return SEARCH_TAGS[v]\n\n\nsource\n\nSearch\n\n Search (search_tag:str=None, retmax:int=200, retmode:str='xml',\n         sort:str='relevance', mindate:Optional[int]=None,\n         maxdate:Optional[int]=None, idlist:Optional[List[int]]=None)\n\nSearch class to warp the search and results\n\n@patch\ndef search(\n    self:Search,\n    query: str, #Query to be search in pubmed\n):\n    \"\"\"\n    It receive a query to be searched in pubmed and return the handler of the search\n    \"\"\"\n    query = query+self.search_tag\n    handle = Entrez.esearch(db='pubmed',\n                    sort=self.sort,\n                    retmax=self.retmax,\n                    retmode=self.retmode,\n                    term=query,\n                    mindate = self.mindate,\n                    maxdate =self. maxdate)\n    results = Entrez.read(handle)\n    return results['IdList']\n\n\nsource\n\n\nSearch.search\n\n Search.search (query:str)\n\nIt receive a query to be searched in pubmed and return the handler of the search\n\n\n\n\nType\nDetails\n\n\n\n\nquery\nstr\nQuery to be search in pubmed\n\n\n\n\nsearch = Search(retmax=2)\n\n\nsearch.dict()\n\n{'search_tag': '[tiab]',\n 'retmax': 2,\n 'retmode': 'xml',\n 'sort': 'relevance',\n 'mindate': None,\n 'maxdate': None,\n 'idlist': None}\n\n\n\nidlist = search.search('divisome')\n\n\nidlist\n\n['33536648', '32424210']\n\n\n\nsource\n\n\nSearch.fetch_details\n\n Search.fetch_details (idlist:List[int])\n\nIt receive a list of pubmedIds from a search, and retrieve all the details of those publications\n\n\n\n\nType\nDetails\n\n\n\n\nidlist\nList\nlist of pubmedid to be retreived\n\n\n\n\n@patch\ndef results(\n    self:Search,\n    query:str, #Term to be queried in pubmed\n)-&gt;Generator[Result, None, None]:\n    \"\"\"\n    Method that do the search and retrieve a generator with all the infomration of the articles\"\"\"\n    id_list = self.search(query)\n    articles = self.fetch_details(id_list)\n    for article in articles:\n        article_dict = parse_paperinfo(article)\n        yield Result.parse_obj(article_dict)\n\nNameError: name 'patch' is not defined\n\n\n\nsource\n\n\nSearch.results\n\n Search.results (query:str)\n\nMethod that do the search and retrieve a generator with all the infomration of the articles\n\n\n\n\nType\nDetails\n\n\n\n\nquery\nstr\nTerm to be queried in pubmed\n\n\nReturns\nGenerator\n\n\n\n\n\narticles = search.results('bifunctional degraders')\n\n\nresults = list(articles)\n\nNameError: name 'articles' is not defined\n\n\n\nresults[-1].title\n\nNameError: name 'results' is not defined\n\n\n\nresults[-1].abstract\n\nNameError: name 'results' is not defined\n\n\n\nresults[-1].published\n\nNameError: name 'results' is not defined"
  }
]